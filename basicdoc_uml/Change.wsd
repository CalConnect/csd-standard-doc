@startuml Change
/'
Diagram:        Change
DateCreate:     28/07/2018
Description:    BasicDocument / SecureDoc is a family of document models that forms the basis of Metanorma IsoDoc (via Metanorma StandardDocument), which is used to represent ISO Standards and similarly structured standards.
                It is also the document model that Selagraph operates on.
                The Relaton Bibliography UML models used in these models are located here: Relaton BibModels.
                BasicDocument itself is a document model that can serve as a transit data structure for document conversion, such as taking input from AsciiDoc or Markdown and converting them into an output format, such as Metanorma IsoDoc

Hystory of changes:
> 22/08/2018
    - diagram configuration updated
'/

'******* CONFIGURATION ************************************************
skinparam classAttributeIconSize 0
skinparam Dpi 150
skinparam Monochrome true
skinparam LineType ortho
hide circle
/' skinparam CircledCharacterRadius 0 '/
/' skinparam CircledCharacterFontSize 0 '/
skinparam Default {
TextAlignment center
FontName Helvetica
}
skinparam Class {
AttributeIconSize 0
BackgroundColor White
FontStyle bold
StereotypeFontSize 10
}
skinparam Rectangle {
BackgroundColor White
FontStyle bold
FontSize 11
StereotypeFontSize 10
}
skinparam Object {
BackgroundColor White
FontStyle bold
FontSize 11
StereotypeFontSize 10
}

skinparam Entity {
StereotypeFontSize 10
}



'******* CLASS DEFINITION *********************************************
class Change {
    +target: ReferenceToldElement
    +identifier: UniqueIdentifier
    +parentIdentifier: UniqueIdentifier[0..1]
    +contribMetadata: ContributionElementMetadata[0..*]
}

class ChangeSet {
    +changes: Change[0..*]
    +documentIdentifier: UniqueIdentifier
}

class UniqueIdentifier {
    +value: String
}

class NodeChange {
    
}

class ContentChange {
    
}

class ContentModify {
    +actions: ContentChangeAction[1..*]
}

class NodeModify {
    +hashValue: String
    +action: NodeAction
}

class NodeMove {
    +positionOld: ReferenceToldElement
    +positionNew: ReferenceToldElement
}

class AttributeModify {
    +actions: ContentChangeAction[1..*]
}

class ContentChangeAction {
    +action: ContentAction
    +from: Integer
    +to: Integer
    +text: String[0..1]
    +length: Integer[0..1]
}

class AttributeChangeAction {
    +attributeId: String
}

enum NodeAction <<enumeration>>{
    insert
    delete
}

enum ContentAction <<enumeration>>{
    insert
    delete
}


'******* NOTES *******************************************************
note right of NodeChange: Add/remove node\nMove node
note top of AttributeModify: Add attribute\nRemove attribute\nModify attribute
note left of ContentChange: Add text\nDelete text\nModify text


'******* CLASS RELATIONS *********************************************
ChangeSet <-- Change
Change <-- UniqueIdentifier
Change <|-- NodeChange
Change <|-- ContentChange

ContentChange <|-- ContentModify

ContentModify <-- ContentChangeAction

ContentChangeAction <-- ContentAction
ContentChangeAction <|-- AttributeChangeAction

ContentModify <|-- AttributeModify

AttributeModify <-- AttributeChangeAction

NodeChange <|-- NodeModify
NodeChange <|-- NodeMove

NodeModify <-- NodeAction

@enduml